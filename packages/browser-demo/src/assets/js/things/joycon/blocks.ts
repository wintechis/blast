/**
 * @fileoverview Blocks definitions for Nintendo JoyCon controllers.
 * @license https://www.gnu.org/licenses/agpl-3.0.de.html AGPLv3
 */

import {
  Blocks,
  dialog,
  Events,
  FieldDropdown,
  FieldTextInput,
  Variables,
} from 'blockly';
import {javascriptGenerator as JavaScript} from 'blockly/javascript';
import {eventsInWorkspace, getWorkspace} from '../../interpreter';
import {implementedThings} from '../../../../ThingsStore/things';
import {BlockDelete} from 'blockly/core/events/events_block_delete';
import {Abstract} from 'blockly/core/events/events_abstract';
import {BlockCreate} from 'blockly/core/events/events_block_create';

Blocks['things_joycon'] = {
  /**
   * Block representing a Nintendo Joy-Con.
   * @this Blockly.Block
   */
  init: function () {
    this.appendDummyInput()
      .appendField('Joy-Con')
      .appendField(new FieldTextInput('Error getting name'), 'name');
    this.appendDummyInput()
      .appendField(new FieldTextInput('Error getting id'), 'id')
      .setVisible(false);
    this.setOutput(true, 'Thing');
    this.setColour(60);
    this.setTooltip('A Nintendo Joy-Con.');
    this.setHelpUrl('https://github.com/wintechis/blast/wiki/Nintendo-JoyCon');
    this.getField('name').setEnabled(false);
  },
  onchange: function (event: Abstract) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (!event.recordUndo) {
      // Events not generated by user. Skip handling.
      return;
    }
    if (
      event.type === Events.BLOCK_CREATE &&
      (event as BlockCreate).ids?.indexOf(this.id) !== -1
    ) {
      // Block is created.
      if (!navigator.bluetooth) {
        dialog.alert(`Webbluetooth is not supported by this browser.\n
          Upgrade to Chrome version 85 or later and enable Experimental Web Platform features.`);
        this.dispose();
        return;
      }
    }
  },
};

// Add Joy-Con block to list of implemented things.
implementedThings.push({
  id: 'joycon',
  name: 'Nintendo Joy-Con',
  type: 'hid',
  blocks: [
    {
      type: 'joycon_read_property',
      category: 'Properties',
    },
    {
      type: 'joycon_button_events',
      category: 'Events',
    },
  ],
  infoUrl: 'https://github.com/wintechis/blast/wiki/Nintendo-JoyCon',
  filters: [
    {
      vendorId: 0x057e, // Nintendo Co., Ltd
      productId: 0x2006, // Joy-Con Left
    },
    {
      vendorId: 0x057e, // Nintendo Co., Ltd
      productId: 0x2007, // Joy-Con Right
    },
  ],
});

Blocks['joycon_read_property'] = {
  /**
   * Block to read a property of a JoyCon.
   * @this Blockly.Block
   */
  init: function () {
    this.appendValueInput('thing')
      .setCheck('Thing')
      .appendField('read')
      .appendField(
        new FieldDropdown([
          ['accelerometers', 'accelerometers'],
          ['actual accelerometer', 'actualAccelerometer'],
          ['actual gyroscope', 'actualGyroscope'],
          ['actual orientation', 'actualOrientation'],
          ['actual orientation quaternion', 'actualOrientationQuaternion'],
          ['gyroscopes', 'gyroscopes'],
          ['quaternion', 'quaternion'],
        ]),
        'property'
      )
      .appendField('property of Nintendo JoyCon');
    this.setInputsInline(false);
    this.setOutput(true, ['String', 'Number']);
    this.setCommentText(
      'Structure of returned value:\n' +
        '{\n' +
        '  "accelerometers": [\n' +
        '    {\n' +
        '      "x": number,\n' +
        '      "y": number,\n' +
        '      "z": number\n' +
        '    },\n' +
        '    {\n' +
        '      "x": number,\n' +
        '      "y": number,\n' +
        '      "z": number\n' +
        '    },\n' +
        '    {\n' +
        '      "x": number,\n' +
        '      "y": number,\n' +
        '      "z": number\n' +
        '    }\n' +
        '  ],\n' +
        '  "actualAccelerometer": {\n' +
        '    "x": number,\n' +
        '    "y": number,\n' +
        '    "z": number\n' +
        '  },\n' +
        '  "actualGyroscope": {\n' +
        '    "rps": {\n' +
        '      "x": number,\n' +
        '      "y": number,\n' +
        '      "z": number\n' +
        '    },\n' +
        '    "dps": {\n' +
        '      "x": number,\n' +
        '      "y": number,\n' +
        '      "z": number\n' +
        '    },\n' +
        '  },\n' +
        '  "actualOrientation": {\n' +
        '    "alpha": number,\n' +
        '    "beta": number,\n' +
        '    "gamma": number\n' +
        '  },\n' +
        '  "actualOrientationQuaternion": {\n' +
        '    "alpha": number,\n' +
        '    "beta": number,\n' +
        '    "gamma": number\n' +
        '  },\n' +
        '  "gyroscopes": [\n' +
        '    {\n' +
        '      "x": {\n' +
        '        "dps": number,\n' +
        '        "rps": number\n' +
        '      },\n' +
        '      "y": {\n' +
        '        "dps": number,\n' +
        '        "rps": number\n' +
        '      },\n' +
        '      "z": {\n' +
        '        "dps": number,\n' +
        '        "rps": number\n' +
        '      }\n' +
        '    },\n' +
        '    {\n' +
        '      "x": {\n' +
        '        "dps": number,\n' +
        '        "rps": number\n' +
        '      },\n' +
        '      "y": {\n' +
        '        "dps": number,\n' +
        '        "rps": number\n' +
        '      },\n' +
        '      "z": {\n' +
        '        "dps": number,\n' +
        '        "rps": number\n' +
        '      }\n' +
        '    },\n' +
        '    {\n' +
        '      "x": {\n' +
        '        "dps": number,\n' +
        '        "rps": number\n' +
        '      },\n' +
        '      "y": {\n' +
        '        "dps": number,\n' +
        '        "rps": number\n' +
        '      },\n' +
        '      "z": {\n' +
        '        "dps": number,\n' +
        '        "rps": number\n' +
        '      }\n' +
        '    },\n' +
        '  ],\n' +
        '  "quaternion": {\n' +
        '    "w": number,\n' +
        '    "x": number,\n' +
        '    "y": number,\n' +
        '    "z": number\n' +
        '  }\n' +
        '}'
    );
    this.setColour(255);
    this.setTooltip('Reads a property of a Nintendo JoyCon controller.');
    this.setHelpUrl('');
  },
  onchange: function (event: Abstract) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (!event.recordUndo) {
      // Events not generated by user. Skip handling.
      return;
    }
    if (
      event.type === Events.BLOCK_CREATE &&
      (event as BlockCreate).ids?.indexOf(this.id) !== -1
    ) {
      // Block is created.
      if (!navigator.bluetooth) {
        dialog.alert(`Webbluetooth is not supported by this browser.\n
          Upgrade to Chrome version 85 or later and enable Experimental Web Platform features.`);
        this.dispose();
        return;
      }
    }
  },
};

Blocks['joycon_button_events'] = {
  /**
   * Block to read a property of a JoyCon.
   * @this Blockly.Block
   */
  init: function () {
    this.appendValueInput('thing')
      .setCheck('Thing')
      .appendField('button events of Nintendo JoyCon');
    this.appendDummyInput('dropdowns')
      .appendField('on button')
      .appendField(
        new FieldDropdown([
          ['A', 'a'],
          ['B', 'b'],
          ['X', 'x'],
          ['Y', 'y'],
          ['up', 'up'],
          ['left', 'left'],
          ['down', 'down'],
          ['right', 'right'],
          ['R', 'r'],
          ['L', 'r'],
          ['RT', 'rt'],
          ['LT', 'lt'],
        ]),
        'button'
      )
      .appendField('pressed');
    this.appendStatementInput('statements').appendField('do');
    this.setInputsInline(false);
    this.setColour(180);
    this.setTooltip('');
    this.setHelpUrl('');
  },
  /**
   * Add this block's id to the events array.
   */
  addEvent: function () {
    eventsInWorkspace.push(this.id);
  },
  onchange: function (event: Abstract) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (!event.recordUndo) {
      // Events not generated by user. Skip handling.
      return;
    }
    if (
      event.type === Events.BLOCK_CREATE &&
      (event as BlockCreate).ids?.indexOf(this.id) !== -1
    ) {
      // Block is created.
      if (!navigator.bluetooth) {
        dialog.alert(`Webbluetooth is not supported by this browser.\n
          Upgrade to Chrome version 85 or later and enable Experimental Web Platform features.`);
        this.dispose();
        return;
      }
      this.addEvent();
    } else if (event.type === Events.BLOCK_DELETE) {
      this.removeFromEvents();
    }
  },
  /**
   * Remove this block's id from the events array.
   */
  removeFromEvents: function () {
    // remove this block from the events array.
    const index = eventsInWorkspace.indexOf(this.id);
    if (index !== -1) {
      eventsInWorkspace.splice(index, 1);
    }
  },
};

Blocks['things_gamepad_pro'] = {
  /**
   * Block representing a Nintendo Switch Gamepad Pro.
   * @this Blockly.Block
   */
  init: function () {
    this.appendDummyInput()
      .appendField('Gamepad Pro')
      .appendField(new FieldTextInput('Error getting name'), 'name');
    this.appendDummyInput()
      .appendField(new FieldTextInput('Error getting id'), 'id')
      .setVisible(false);
    this.setOutput(true, 'Thing');
    this.setColour(60);
    this.setTooltip('A Nintendo Switch Gamepad Pro.');
    this.setHelpUrl('https://github.com/wintechis/blast/wiki/Nintendo-JoyCon');
    this.getField('name').setEnabled(false);
  },
  onchange: function (event: Abstract) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (!event.recordUndo) {
      // Events not generated by user. Skip handling.
      return;
    }
    if (
      event.type === Events.BLOCK_CREATE &&
      (event as BlockCreate).ids?.indexOf(this.id) !== -1
    ) {
      // Block is created.
      if (!navigator.bluetooth) {
        dialog.alert(`Webbluetooth is not supported by this browser.\n
          Upgrade to Chrome version 85 or later and enable Experimental Web Platform features.`);
        this.dispose();
        return;
      }
    }
  },
};

/**
 * gamepad pro buttons are:
 * const BUTTON_MAPPING = {
  0: 'B',
  1: 'A',
  2: 'Y',
  3: 'X',
  4: 'L',
  5: 'R',
  6: 'ZL',
  7: 'ZR',
  8: 'MINUS',
  9: 'PLUS',
  10: 'LS',
  11: 'RS',
  12: 'UP',
  13: 'DOWN',
  14: 'LEFT',
  15: 'RIGHT',
  16: 'HOME',
  17: 'CAPTURE',
};
*/

// Add Joy-Con block to list of implemented things.
implementedThings.push({
  id: 'gamepad_pro',
  name: 'Nintendo Switch Gamepad Pro',
  type: 'gamepad',
  blocks: [
    {
      type: 'gamepad_pro_joystick',
      category: 'Events',
    },
    {
      type: 'gamepad_pro_button',
      category: 'Events',
    },
  ],
  infoUrl: 'https://github.com/wintechis/blast/wiki/Nintendo-JoyCon',
  filters: [
    {
      buttons: {
        length: 18,
      },
    },
  ],
});

Blocks['gamepad_pro_joystick'] = {
  /**
   * Block to subscribe to Gamepad Joystick events.
   * @this Blockly.Block
   */
  init: function () {
    this.appendValueInput('thing')
      .setCheck('Thing')
      .appendField('Joystick events of Gamepad Pro');
    this.appendDummyInput()
      .appendField('uses variables')
      .appendField(new FieldTextInput('gp-x'), 'gp-xName')
      .appendField(new FieldTextInput('gp-y'), 'gp-yName')
      .appendField(new FieldTextInput('gp-angle'), 'gp-angleName');
    this.appendDummyInput().appendField('when joystick moves');
    this.appendStatementInput('statements').appendField('do');
    this.setInputsInline(false);
    this.setColour(180);
    this.setTooltip('');
    this.setHelpUrl('');
    this.getField('gp-xName').setEnabled(false);
    this.getField('gp-yName').setEnabled(false);
    this.getField('gp-angleName').setEnabled(false);
    this.xName = '';
    this.yName = '';
    this.angleName = '';
  },
  /**
   * Add this block's id to the events array.
   */
  addEvent: function () {
    eventsInWorkspace.push(this.id);
  },
  onchange: function (event: Abstract) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (!event.recordUndo) {
      // Events not generated by user. Skip handling.
      return;
    }
    if (
      event.type === Events.BLOCK_CREATE &&
      (event as BlockCreate).ids?.indexOf(this.id) !== -1
    ) {
      this.addEvent();
      if (this.childBlocks_.length === 0) {
        this.createVars();
      }
    } else if (event.type === Events.BLOCK_DELETE) {
      this.removeFromEvents();
      this.deleteVars();
    }
  },
  /**
   * Remove this block's id from the events array.
   */
  removeFromEvents: function () {
    // remove this block from the events array.
    const index = eventsInWorkspace.indexOf(this.id);
    if (index !== -1) {
      eventsInWorkspace.splice(index, 1);
    }
  },
  createVars: function () {
    const ws = getWorkspace();
    if (ws === null) {
      return;
    }

    // Create variable for x coordinate.
    let xName = 'gp_x';
    for (let i = 1; Variables.nameUsedWithAnyType(xName, ws) !== null; i++) {
      xName = 'gp_x_' + i;
    }
    this.xName = Variables.getOrCreateVariablePackage(ws, null, xName, '').name;
    this.getField('gp-xName').setValue(this.xName);

    // Create variable for y coordinate.
    let yName = 'gp_y';
    for (let i = 1; Variables.nameUsedWithAnyType(yName, ws) !== null; i++) {
      yName = 'gp_y_' + i;
    }
    this.yName = Variables.getOrCreateVariablePackage(ws, null, yName, '').name;
    this.getField('gp-yName').setValue(this.yName);

    // Create variable for angle.
    let angleName = 'gp_angle';
    for (
      let i = 1;
      Variables.nameUsedWithAnyType(angleName, ws) !== null;
      i++
    ) {
      angleName = 'gp_angle_' + i;
    }
    this.angleName = Variables.getOrCreateVariablePackage(
      ws,
      null,
      angleName,
      ''
    ).name;
    this.getField('gp-angleName').setValue(this.angleName);
  },
  deleteVars: function () {
    const ws = getWorkspace();
    if (ws === null) {
      return;
    }
    const xId = Variables.getVariable(ws, null, this.xName, '')?.getId();
    if (xId) {
      ws.deleteVariableById(xId);
    }
    ws.deleteVariableById(this.yName);
    ws.deleteVariableById(this.angleName);
  },
};

Blocks['gamepad_pro_button'] = {
  /**
   * Block to subscribe to Gamepad Button events.
   * @this Blockly.Block
   */
  init: function () {
    this.appendValueInput('thing')
      .setCheck('Thing')
      .appendField('button events of Gamepad Pro');
    this.appendDummyInput()
      .appendField('on button')
      .appendField(
        new FieldDropdown([
          ['A', 'A'],
          ['B', 'B'],
          ['X', 'X'],
          ['Y', 'Y'],
          ['up', 'UP'],
          ['left', 'LEFT'],
          ['down', 'DOWN'],
          ['right', 'RIGHT'],
          ['R', 'R'],
          ['L', 'L'],
          ['RT', 'ZR'],
          ['LT', 'ZL'],
        ]),
        'button'
      )
      .appendField('pressed');
    this.appendStatementInput('statements').appendField('do');
    this.setInputsInline(false);
    this.setColour(180);
    this.setTooltip('');
    this.setHelpUrl('');
  },
  /**
   * Add this block's id to the events array.
   */
  addEvent: function () {
    eventsInWorkspace.push(this.id);
  },
  /**
   * Remove this block's id from the events array.
   */
  onchange: function (event: Abstract) {
    if (!this.workspace || this.workspace.isFlyout) {
      // Block is deleted or is in a flyout.
      return;
    }
    if (!event.recordUndo) {
      // Events not generated by user. Skip handling.
      return;
    }
    if (
      event.type === Events.BLOCK_CREATE &&
      (event as BlockCreate).ids?.indexOf(this.id) !== -1
    ) {
      this.addEvent();
    } else if (event.type === Events.BLOCK_DELETE) {
      this.removeFromEvents();
    }
  },
  removeFromEvents: function () {
    // remove this block from the events array.
    const index = eventsInWorkspace.indexOf(this.id);
    if (index !== -1) {
      eventsInWorkspace.splice(index, 1);
    }
  },
};
