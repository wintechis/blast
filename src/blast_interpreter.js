/**
 * @fileoverview defines helper functions for the JS Interpreter and its API.
 * (https://github.com/NeilFraser/JS-Interpreter)
 * @author derwehr@gmail.com (Thomas Wehr)
 * @license https://www.gnu.org/licenses/agpl-3.0.de.html AGPLv3
 */
'use strict';

goog.module('Blast.Interpreter');
goog.module.declareLegacyNamespace();

const {currentToolbox} = goog.require('Blast.Toolbox');

/**
 * Instance of the JS Interpreter.
 * @type {?Interpreter}
 * @public
 */
let interpreter = null;
exports.interpreter = interpreter;

/**
 * Getter for the interpreter.
 * @return {Interpreter} the interpreter.
 */
const getInterpreter = function() {
  return interpreter;
};
exports.getInterpreter = getInterpreter;

/**
 * Array of tuples, containg names and functions defined in the things folder,
 * in order to add them to the interpreter API in {@link initAPI}.
 * @type {[string, function][]}
 * @public
 */
const apiFunctions = [];
exports.apiFunctions = apiFunctions;
 
/**
  * Array of tuples, containg names and asynchronous functions defined in the
  * things folder, in order to add them to the interpreter API in {@link initAPI}.
  * @type {[string, function][]}
  * @public
  */
const asyncApiFunctions = [];
exports.asyncApiFunctions = asyncApiFunctions;
 
/**
  * Indicates wheter BLAST is current interrupted.
  * @type {boolean}
  * @public
  */
let interrupted = false;
/**
 * Getter for interrupted.
 * @return {boolean} interrupted
 */
const getInterrupted = function() {
  return interrupted;
};
exports.getInterrupted = getInterrupted;
/**
 * Setter for interrupted.
 * @param {boolean} val value to set.
 */
const setInterrupted = function(val) {
  interrupted = val;
};
exports.setInterrupted = setInterrupted;
apiFunctions.push(['setInterrupted', setInterrupted]);

/**
 * Enum for Blast status
 * @enum {string}
 * @public
 */
const statusValues = {
  READY: 'ready',
  RUNNING: 'running',
  STOPPED: 'stopped',
  ERROR: 'error',
};
exports.statusValues = statusValues;

/**
 * Stores the current status of the interpreter, set through {@link setStatus}.
 */
let status = statusValues.READY;

/**
 * Stores functions to be invoked when status changes.
 */
const onStatusChange = {ready: [], running: [], stopped: [], error: []};
exports.onStatusChange = onStatusChange;

/**
 * Sets the current status of the interpreter.
 * @param {string} newStatus new status.
 */
const setStatus = function(newStatus) {
  if (status !== newStatus) {
    status = newStatus;
    for (const func of onStatusChange[status]) {
      func();
    }
  }
};

/**
 * latest JavaScript code generated by Blast.
 * @type {string}
 * @public
 */
let latestCode = '';

/**
 * Getter for latestCode.
 * @return {string} latestCode
 */
const getLatestCode = function() {
  return latestCode;
};
exports.getLatestCode = getLatestCode;

/**
 * Instance of runner function.
 * @type {?function}
 * @private
 */
let runner_ = null;

/**
 * Blast's main workspace.
 * @type {Blockly.workspaceSvg}
 * @public
 */
let workspace = null;

/**
 * Gets the workspace
 * @return {Blockly.Workspace} the workspace
 */
const getWorkspace = function() {
  return workspace;
};
exports.getWorkspace = getWorkspace;

/**
 * Array containing all interval events.
 * @type {!Array<!Number>}
 */
let intervalEvents = [];
exports.intervalEvents = intervalEvents;

/**
 * Tracks event blocks currently in the workspace,
 * in order to run indefinately if in case there are any.
 */
const eventInWorkspace = [];
exports.eventInWorkspace = eventInWorkspace;

/**
 * Stores event handlers of webHID devices, in order to remove them on code completion.
 */
let deviceEventHandlers = [];
exports.deviceEventHandlers = deviceEventHandlers;

/**
 * Stores functions to invoke to reset, when the interpreter is stopped.
 */
const cleanUpFunctions = [];
exports.cleanUpFunctions = cleanUpFunctions;

/**
 * Set to true if the States Interpreter is running.
 */
let statesInterpreterRunning = false;
const setStatesInterpreterRunning = function(val) {
  statesInterpreterRunning = val;
};
exports.setStatesInterpreterRunning = setStatesInterpreterRunning;

/**
 * Defines the Interpreters standard output.
 */
let stdOut = prompt;
/**
 * Setter for the Interpreter's standard output function.
 * @param {Function} fn the stdEut function.
 * @public
 */
const setStdOut = function(fn) {
  stdOut = fn;
};
exports.setStdOut = setStdOut;

/**
 * Getter for the Interpreter's standard output function.
 * @return {Function} the stdOut function.
 */
const getStdOut = function() {
  return stdOut;
};
exports.getStdOut = getStdOut;

/**
 * Defines the Interpreters standard info output function.
 */
let stdInfo = prompt;
/**
 * Setter for the Interpreter's standard info output function.
 * @param {Function} fn the stdInfo function.
 */
const setStdInfo = function(fn) {
  stdInfo = fn;
};
exports.setStdInfo = setStdInfo;
/**
 * Getter for the Interpreter's standard info output function.
 * @return {Function} the stdInfo function.
 */
const getStdInfo = function() {
  return stdInfo;
};
exports.getStdInfo = getStdInfo;


/**
 * Defines the Interpreters standard error output.
 */
let stdErr = prompt;
/**
 * Setter for the Interpreter's standard error output function.
 * @param {Function} fn the stdErr function.
 * @public
 */
const setStdError = function(fn) {
  stdErr = fn;
};
exports.setStdError = setStdError;
/**
 * Getter for the Interpreter's standard error output function.
 * @return {Function} the stdErr function.
 */
const getStdError = function() {
  return stdErr;
};
exports.getStdError = getStdError;

/**
 * removes all event handlers of webHID devices from {@link deviceEventHandlers}
 */
const removeDeviceHandlers = function() {
  for (const handler of deviceEventHandlers) {
    const device = handler.device;
    device.removeEventListener(handler.type, handler.fn);
  }
  deviceEventHandlers = [];
};

/**
 * Clears all interval events.
 */
const clearIntervalEvents = function() {
  for (const event of intervalEvents) {
    clearInterval(event);
  }
  intervalEvents = [];
};

/**
 * Reset the JS Interpreter.
 * @public
 */
const resetInterpreter = function() {
  interpreter = null;
  if (runner_) {
    clearTimeout(runner_);
    runner_ = null;
  }
  Blast.Bluetooth.tearDown();
  removeDeviceHandlers();
  clearIntervalEvents();
  
  for (const func of cleanUpFunctions) {
    func();
  }
};
exports.resetInterpreter = resetInterpreter;

/**
 * Stop the JavaScript execution.
 * @public
 */
const stopJS = function() {
  resetInterpreter();
  setStatus(statusValues.STOPPED);
};
exports.stopJS = stopJS;

/**
 * Stop execution and adds an error message to the
 * {@link Blast.Ui.messageOutputContainer}.
 * @param {string=} text optional, a custom error text
 * @license https://www.gnu.org/licenses/agpl-3.0.de.html AGPLv3
 */
const throwError = function(text) {
  if (!text) {
    text = 'Error executing program - See console for details.';
  }

  stdErr(text);
  setStatus(statusValues.ERROR);
  resetInterpreter();
  stdInfo('Execution stopped');
};
exports.throwError = throwError;

/**
 * Generate JavaScript Code for the user's block-program.
 * @public
 */
const generateCode = function() {
  Blockly.JavaScript.STATEMENT_PREFIX = 'highlightBlock(%1);\n';
  Blockly.JavaScript.addReservedWords('highlightBlock');
  // Generate JavaScript code and parse it.
  latestCode = '';
  latestCode = Blockly.JavaScript.workspaceToCode(workspace);
};

/**
 * defines an API for the JS Interpreter.
 * @param {!Interpreter} interpreter interpreter object.
 * @param {!Interpreter.Object} globalObject global scope object.
 */
function initApi(interpreter, globalObject) {
  // Add functions of {@link apiFunctions} to the interpreter.
  for (const f of apiFunctions) {
    // Add function name to reserverd words.
    Blockly.JavaScript.addReservedWords(f[0]);
    // Add function to global scope.
    interpreter.setProperty(
        globalObject,
        f[0], // the function name
        interpreter.createNativeFunction(f[1]), // the function
    );
  }

  // Add functions of {@link asyncApiFunctions} to the interpreter.
  for (const f of asyncApiFunctions) {
    interpreter.setProperty(
        globalObject,
        f[0], // the function name
        interpreter.createAsyncFunction(f[1]), // the function
    );
  }
}

/**
 *
 */
const initInterpreter = function() {
  workspace = Blockly.inject('content_workspace', {
    // grid: {spacing: 25, length: 3, colour: '#ccc', snap: true},
    media: 'media/',
    toolbox: currentToolbox,
    zoom: {controls: true, wheel: true},
  });

  // Load the interpreter now, and upon future changes.
  generateCode();
  workspace.addChangeListener(function(event) {
    if (!(event instanceof Blockly.Events.Ui)) {
      // Something changed. Parser needs to be reloaded.
      generateCode();
    }
  });
};
exports.initInterpreter = initInterpreter;

/**
 * Execute the user's code.
 * @public
 */
const runJS = function() {
  setStatus(statusValues.RUNNING);
  stdInfo('execution started');
  if (interpreter == null) {
    // Begin execution
    interpreter = new Interpreter(latestCode, initApi);

    /**
     * executes {@link latestCode} using {@link interpreter}.
     * @function runner_
     * @memberof Blast#
     */
    runner_ = function() {
      if (interpreter) {
        try {
          if (interrupted) {
            // Execution is currently interrupted, try again later.
            setTimeout(runner_, 1);
          } else {
            const hasMore = interpreter.step();
            if (hasMore) {
              // Execution is currently blocked by some async call.
              // Try again later.
              setTimeout(runner_, 1);
            } else if (statesInterpreterRunning || eventInWorkspace.length > 0) {
              // eventChecker is running,
              // dont reset UI until stop button is clicked.
            } else {
              // Program is complete.
              setStatus(statusValues.READY);
              stdInfo('execution completed');
              resetInterpreter();
            }
          }
        } catch (error) {
          throwError(error);
          resetInterpreter();
          console.error(error);
        }
      }
    };

    runner_();
  }
};
exports.runJS = runJS;
